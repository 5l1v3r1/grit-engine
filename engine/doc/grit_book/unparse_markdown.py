#!/usr/bin/python

import codecs
import textwrap
import re
import string

from xml.sax.saxutils import escape
import lxml.etree as ET

from translate_xml import *


def UnparseMarkdownGetParentIndex(node):
    i = 0
    for c in node.parent:
        if c.kind == 'Section':
            i += 1
        if c == node:
            return i
    return None
        

def UnparseMarkdownGetPath(node):
    if not node.parent:
        return []
    here = []
    if node.kind == 'Section':
        here = [str(UnparseMarkdownGetParentIndex(node))]
    return UnparseMarkdownGetPath(node.parent) + here


def UnparseMarkdownGetLinkToNode(target):
    the_file = GetOutputFile(target)
    if the_file.id == target.id:
        return '%s.html' % the_file.id
    else:
        return '%s.html#%s' % (the_file.id, target.id)


def UnparseMarkdownGetPathString(node):
    return '.'.join(UnparseMarkdownGetPath(node))


def UnparseMarkdownGeneratePage(title, content, book):
 
#    s = 'This markdown file .md is generated by convert_web.py script.\n'
#    s += 'WARNING: If you modify this file, your changes will be lost when script will be re-executed.'
    s = ''
    s += content
    s = UnparseMarkdownReplace( s )

    return s

def UnparseMarkdownReplace( s ):
    s = string.replace(s,'&amp;', '&')
    return s

def UnparseMarkdownReadme( s ):
    s = string.replace(s,'## Compilation Instructions', '### Grit Engine')
    s = re.sub('^##', '', s, flags=re.MULTILINE)
    return s

def UnparseMarkdownInlines(parent, inner=False):
    s = ""
    for n in parent:
        if isinstance(n, basestring):
            s += escape(n)
        elif n.kind == 'Definition':
            s += '***%s***' % (UnparseMarkdownInlines(n.data, True))
        elif n.kind == 'Issue':
            url = 'http://code.google.com/p/grit/issues/detail?id=%d' % n.id
            s += '[>issue %d](%s)' % (n.id,url)
        elif n.kind == 'Italic':
            s += '*%s*' % UnparseMarkdownInlines(n.data, True)
        elif n.kind == 'Emph':
            s += '**%s**' % UnparseMarkdownInlines(n.data, True)
        elif n.kind == 'Code':
            s += '`%s`' % UnparseMarkdownInlines(n.data, True)
        elif n.kind == 'Todo':
            s += '---(TODO: %s)---' % UnparseMarkdownInlines(n.data, True)
        elif n.kind == 'Web':
            s += '[%s](%s)' % (UnparseMarkdownInlines(n.data, True), n.url) 
        elif n.kind == 'SRef':
            content = UnparseMarkdownInlines(n.data, True)
            s += '%s ([&sect;%s](%s))' % (content, UnparseMarkdownGetPathString(n.target), UnparseMarkdownGetLinkToNode(n.target))
        else:
            print 'ERROR: unknown node kind: ' + n.kind
    s = UnparseMarkdownReplace( s )
    return s


def UnparseMarkdownBlocks(book, parent, split_below, never_split):
    s = ""
    for n in parent:
        if n.kind == 'Image':
            s += '![%s](../img/%s)%s\n' % (escape(n.title),escape(n.src),escape(n.caption))
        elif n.kind == 'UnorderedList':
            for item in n.data:
                s += '* %s' % (UnparseMarkdownBlocks(book, item, split_below, never_split))
        elif n.kind == 'Section':
            new_path = UnparseMarkdownGetPath(n)
            h = len(new_path) 
            title = '%s' % (escape(n.title)) 
            inner_md = '\n\n%s %s\n' % ("#" * h, title) 
            inner_md += UnparseMarkdownBlocks(book, n, n.split, never_split)
            if split_below and not never_split:
                filename = 'md/' + n.id + '.md'
                print 'Writing ' + filename
                f = codecs.open(filename, 'w', 'utf-8')
                f.write(UnparseMarkdownGeneratePage(n.title, inner_md, book))
                f.close()
                if n.id == 'compilation':
                    filename = 'md/README.md'
                    print 'Writing ' + filename
                    f = codecs.open(filename, 'w', 'utf-8')
                    f.write(UnparseMarkdownGeneratePage(n.title, UnparseMarkdownReadme(inner_md), book))
                    f.close()
            else:
                s += inner_md
        elif n.kind == 'Preformatted':
            s += '%s' % n.data
        elif n.kind == 'Lua':
            s += '\n```%s```\n' % (n.data)
        elif n.kind == 'Paragraph':
            s += '\n'
            s += '\n'.join(textwrap.wrap(UnparseMarkdownInlines(n.data),100))
            s += '\n'
        else:
            print "ERROR: unknown node kind: " + n.kind
    if split_below and not never_split:
        s += BuildMarkdownIndex(parent)
    s = UnparseMarkdownReplace( s )
    return s


def BuildMarkdownIndex(parent, indent=0):
    indentstr = ' ' * (indent*1)
    index = indentstr + '\n'
    section_index = 0
    for n in parent:
        if n.kind == 'Section':
            section_index += 1
            path_string = UnparseMarkdownGetPathString(n)
            title = escape(n.title)
            index += ' ' * ((indent+1)*1)
            url = UnparseMarkdownGetLinkToNode(n)
            cls = 'index' if parent.split else 'index_nocol'
            index += '%s [%s](%s)\n' % (path_string, title, url) #cls, 
            index += BuildMarkdownIndex(n, indent+1)
    index += indentstr + '\n'
    if section_index == 0:
        return ''
    return index

